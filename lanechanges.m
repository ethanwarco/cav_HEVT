function [allData, scenario, sensors] = generateSensorData()
%generateSensorData - Returns sensor detections
%    allData = generateSensorData returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = generateSensorData optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 21-Apr-2024 02:23:56

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1);

    % Generate detections for each sensor

    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0 0 0;
    100 0 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [2 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
direction = [1 0 0];
egoVelocity = 5;

% Add the non-ego actors
otherVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [2 2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
otherVelocity = 3



% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
ll = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [0.95 0.9], ...
    'Yaw', 135, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
back = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);


plot(scenario)

dt = 1;
time = 19 / dt;
laneChangeDistance = 10;
changingLanes = false;
inLane = false;
lastDistance = -1;
measuredVelocity = -1;
timeToSwitchLanes = 3;
for n = 1:time
    if changingLanes
        timeToSwitchLanes = timeToSwitchLanes - dt;
    end
    if timeToSwitchLanes < 0
        inLane = true;
    end


    % collect measurement data and find distance from vehicle in y
    % direction, vehicles velocity, and lane data
    leftDets = ll(targetPoses(egoVehicle), n * dt);
    backDets = back(targetPoses(egoVehicle), n * dt);
    measuredDistance = -1;
    centerOfLane = false;

    % calculates distance from car with left and back cameras
    if (~isempty(leftDets))
        measurement = leftDets{1,1}.Measurement;
        measuredDistance = abs(measurement(1));
    elseif (~isempty(backDets))
        measurement = backDets{1,1}.Measurement;
        measuredDistance = abs(measurement(1));
    end
    
    % calculate velocity if lastDistance and measuredDistance both exist
    if (lastDistance ~= -1 & measuredDistance ~= -1)
        relativeVelocity = (lastDistance - measuredDistance) / dt;
        
        % averages the measured velocity with the previous value to reduce
        % error unless it is the first measured velocity value
        if measuredVelocity ~= -1
            measuredVelocity = (measuredVelocity + (egoVelocity + relativeVelocity)) / 2;
        else
            measuredVelocity = egoVelocity + relativeVelocity;
        end
        
    end
    display(measuredVelocity)

    % updates vehicle positions based off of their velocities
    otherVehicle.Position = [(otherVelocity * dt + otherVehicle.Position(1)) 2 0];
    egoVehicle.Position = [(direction(1) * egoVelocity * dt + egoVehicle.Position(1))
                           (direction(2) * egoVelocity * dt + egoVehicle.Position(2))
                           (direction(3) * egoVelocity * dt + egoVehicle.Position(3))];


    % collect lane distance to see if we are in center of lane
    if inLane & changingLanes
        direction = [1 0 0];
        changingLanes = false;
    end

    % while the car is in the desired lane, it matches the speed of the car
    % behind it
    if inLane & measuredVelocity ~= -1
        % this works sometimes
        egoVelocity = (egoVelocity * .9) + (measuredVelocity * .1);
    end

    % only try to change lanes if not already in the desired lane
    if ~inLane & measuredDistance >= laneChangeDistance
        changingLanes = true;
        direction = [0.9848 0.1736 0];
    end
    
    % update last distance measurement
    lastDistance = measuredDistance;
    refreshdata
    drawnow
    pause(.1)
end