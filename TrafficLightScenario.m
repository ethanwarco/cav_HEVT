close all;
clear
clc
% Construct a drivingScenario object.
scenario = drivingScenario();
pedestrian = actor(scenario,'ClassID', 4,'Position',[108 -4 0], 'Length',0.24,'Width',0.45,'Height',1.7);
% Add all road segments
solidW = laneMarking('Solid');
dashedW = laneMarking('Dashed');
solidY = laneMarking('DoubleSolid', 'Color', 'y');
roadCenters = [0 3.6 0; 180 3.6 0];
laneSpecification = lanespec([2 2], 'Marking', [solidW dashedW solidY dashedW solidW]);
road(scenario, roadCenters, 'Lanes', laneSpecification);
road(scenario, [100, 99, 0; 100, -99, 0], 'Lanes', laneSpecification);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [50 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
egoDirection = [1 0 0];
otherDirection = [1 0 0];

vehicles = {egoVehicle};
vehicles{2} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [60 2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{3} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [79 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{4} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [68 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{5} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [80 2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{6} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [94.5 26 0], ...
    'Yaw', 90,...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{7} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [94.5 20 0], ...
    'Yaw', 90,...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{8} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [94.5 14 0], ...
    'Yaw', 90,...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
vehicles{9} = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [100 5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');




% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors = {};
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.5 -0.9], ...
    'MaxRange', 99999, ...
    'Yaw', 90, ...
    'DetectionProbability', 1, ...
    'FalsePositivesPerImage', 0, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([200 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.5 0.9], ...
    'MaxRange', 99999, ...
    'Yaw', -90, ...
    'DetectionProbability', 1, ...
    'FalsePositivesPerImage', 0, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([200 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'MaxRange', 99999, ...
    'SensorLocation', [0.95 0], ...
    'DetectionProbability', 1, ...
    'FalsePositivesPerImage', 0, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([200 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'MaxRange', 99999, ...
    'SensorLocation', [1.9 0], ...
    'Yaw', 180, ...
    'DetectionProbability', 1, ...
    'FalsePositivesPerImage', 0, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([200 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
directions = {egoDirection otherDirection otherDirection otherDirection otherDirection};
velocities = [5 3 5 4 4];



dt = 1;
time = 30 / dt;
laneChangeDistance = 10;
safeDistance = 10;
changingLane = -1;
inLane = false;
laneVelocity = 0;
prevMeasurements = {};

NS = 'g';
LR = 'r';

for n = 1:3
    plot(scenario)
    hold all
    if n == 2 
        NS = 'y';
        LR = 'r';
    end
    plot(107, 0, 'Marker', 'o', 'MarkerFaceColor', NS, 'MarkerSize', 8)
    plot(92, 7, 'Marker', 'o', 'MarkerFaceColor', NS, 'MarkerSize', 8)
    plot(96, -4, 'Marker', 'o', 'MarkerFaceColor', LR, 'MarkerSize', 8)
    plot(104, 11, 'Marker', 'o', 'MarkerFaceColor', LR, 'MarkerSize', 8)
    refreshdata
    drawnow
end
